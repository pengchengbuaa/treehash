#!/usr/bin/env python
import argparse

import math
import os
from concurrent.futures import ThreadPoolExecutor, wait
from treehash import TreeHash
from treehash import MEGABYTE

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Compute sha256-treehash.')
    parser.add_argument(
        'file_name', help="input filename", type=str)
    parser.add_argument(
        "-p", "--process", help="number of hashing process, recommand larger than 2 but less than your cpu core number, default 4", default=4, dest='process_n', type=int)
    args = parser.parse_args()

    file_name = args.file_name
    process_n = args.process_n
    file_size = os.path.getsize(file_name)
    print("Processing file :"+file_name + " with size:"+file_size + "bytes")
    print("Using " + str(process_n) + "processes to hash")
    with open(file_name, 'rb') as my_file:
        chunck_n = math.ceil(file_size / MEGABYTE)
        treehash = TreeHash(chunck_n)
        executor = ThreadPoolExecutor(process_n)
        futures = []
        for chunck in range(0, chunck_n):
            data = my_file.read(MEGABYTE)
            futures.append(executor.submit(
                treehash.update, data, chunck))
        wait(futures)
        print("%s: %s" % (file_name, treehash.hexdigest()))
        executor.shutdown()
